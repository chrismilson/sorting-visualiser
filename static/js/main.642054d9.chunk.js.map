{"version":3,"sources":["components/algorithm-visualiser/algorithm-simulator.js","components/algorithm-visualiser/index.js","index.js","App.js","components/algorithm-visualiser/simulator.worker.js"],"names":["Simulator","this","worker","Worker","onmessage","handleMessage","bind","resolve","reject","id","calculate","algorithm","values","Promise","postMessage","message","data","moves","Visualiser","props","canvas","React","createRef","resize","handleResize","Array","size","i","Math","random","orig","calculated","then","moveIdx","setState","prev","next","ctx","current","getContext","window","addEventListener","cancelAnimationFrame","animationFrame","removeEventListener","animate","width","offsetWidth","height","offsetHeight","setTransform","length","drawValues","style","from","to","beginPath","moveTo","lineTo","closePath","fillStyle","fill","idx","fillRect","clearRect","state","move","type","drawValue","j","clearScreen","drawMove","temp","step","reverse","speed","requestAnimationFrame","redraw","ref","className","Component","defaultProps","ReactDOM","render","useState","setAnimate","onClick","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.642054d9.chunk.js","sourcesContent":["import Worker from './simulator.worker'\n\n/**\n * This is a wrapper for a web worker that will perform the calculation.\n *\n * In the main component, only some high level methods need to be called and\n * this module will communicate with the actual worker.\n *\n * The asynchronous worker interaction will be abstracted with promises.\n */\nexport default class Simulator {\n  constructor () {\n    this.worker = new Worker()\n    this.worker.onmessage = this.handleMessage.bind(this)\n    this.resolve = {}\n    this.reject = {}\n    this.id = 0\n\n    this.calculate = this.calculate.bind(this)\n  }\n\n  calculate (algorithm, values) {\n    return new Promise((resolve, reject) => {\n      const id = this.id++\n      this.resolve[id] = resolve\n      this.reject[id] = reject\n\n      this.worker.postMessage({ id, algorithm, values })\n    })\n  }\n\n  /**\n   * When the worker responds, this method resolves the promise that was\n   * supplied on request.\n   *\n   * @param {MessageEvent} message\n   */\n  handleMessage (message) {\n    const { id, moves } = message.data\n\n    this.resolve[id](moves)\n  }\n}\n","/**\n * This script will control the canvas displaying the data and also control the\n * web-worker that is calculating the steps that the sorting algorithms go\n * through.\n */\n\nimport React from 'react'\nimport Simulator from './algorithm-simulator'\nimport './style.scss'\n\nexport default class Visualiser extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.calculate = new Simulator().calculate\n\n    this.canvas = React.createRef()\n    this.resize = this.handleResize.bind(this)\n\n    this.values = new Array(props.size)\n    for (var i = 0; i < props.size; i++) {\n      this.values[i] = Math.random()\n    }\n    this.orig = [...this.values]\n\n    this.calculated = false\n    this.calculate('bubble sort', this.values)\n      .then(moves => {\n        this.calculated = true\n        this.moveIdx = -1\n        this.setState({ moves })\n      })\n\n    this.prev = this.prev.bind(this)\n    this.next = this.next.bind(this)\n    this.handleResize = this.handleResize.bind(this)\n  }\n\n  componentDidMount () {\n    this.ctx = this.canvas.current.getContext('2d')\n    this.handleResize()\n\n    window.addEventListener('resize', this.handleResize)\n  }\n\n  componentWillUnmount () {\n    window.cancelAnimationFrame(this.animationFrame)\n    window.removeEventListener('resize', this.handleResize)\n  }\n\n  componentDidUpdate () {\n    if (this.calculated) {\n      this.animate()\n    }\n  }\n\n  /**\n   * Resets the drawing context dimensions.\n   *\n   * Used when the screen is resized to make sure the content fits the window.\n   */\n  handleResize () {\n    const width = this.ctx.canvas.width = 2 * this.canvas.current.offsetWidth\n    const height = this.ctx.canvas.height = 2 * this.canvas.current.offsetHeight\n\n    if (width > height) {\n      // base on the bottom, smallest at the left\n      this.ctx.setTransform(\n        width / this.values.length, 0, 0,\n        -height, 0, height\n      )\n    } else {\n      // base on the right, smallest at the top\n      this.ctx.setTransform(\n        0, height / this.values.length, -width,\n        0, width, 0\n      )\n    }\n\n    // redraw\n    this.drawValues()\n  }\n\n  /**\n   * Draws all of the values in the array from 'from' to 'to'.\n   * User can also specify color.\n   *\n   * defaults to painting all values in color '#57a3cf'\n   */\n  drawValues (style = '#57a3cf', from = 0, to = this.values.length) {\n    // trace the array\n    this.ctx.beginPath()\n\n    // start point at base\n    this.ctx.moveTo(from, 0)\n    // Then two points per value.\n    for (var i = from; i < to; i++) {\n      // one for the left tip of the bar\n      this.ctx.lineTo(i, this.values[i])\n      // one for the right\n      this.ctx.lineTo(i + 1, this.values[i])\n    }\n    // final point at base\n    this.ctx.lineTo(this.values.length, 0)\n    this.ctx.closePath()\n\n    this.ctx.fillStyle = style\n    this.ctx.fill()\n  }\n\n  /**\n   * Draws the single value at a given index in a given color.\n   * @param {string} color\n   * @param {number} idx\n   */\n  drawValue (style, idx) {\n    this.ctx.fillStyle = style\n    this.ctx.fillRect(idx, 0, 1, this.values[idx])\n  }\n\n  /**\n   * clears the screen ready for a new frame.\n   */\n  clearScreen () {\n    this.ctx.clearRect(0, 0, this.values.length, 1)\n  }\n\n  /**\n   * Displays the current move if valid.\n   */\n  drawMove () {\n    if (this.moveIdx < 0 || this.moveIdx >= this.state.moves.length) return\n    const move = this.state.moves[this.moveIdx]\n\n    switch (move.type) {\n      case 'swap':\n        this.drawValue('cyan', move.i)\n        this.drawValue('cyan', move.j)\n        break\n      case 'compare':\n        this.drawValue('green', move.i)\n        this.drawValue('red', move.j)\n        break\n      default:\n    }\n  }\n\n  /**\n   * fully redraws the screen with all the values and the current move.\n   */\n  redraw () {\n    this.clearScreen()\n    this.drawValues()\n    this.drawMove()\n  }\n\n  /**\n   * Move the internal state forward by one move. This involves modifying the\n   * values for swap moves, for example.\n   *\n   * Returns true when the algorithm completed a move.\n   */\n  next () {\n    if (this.moveIdx++ >= this.state.moves.length - 1) return false\n\n    const move = this.state.moves[this.moveIdx]\n\n    switch (move.type) {\n      case 'swap':\n        const temp = this.values[move.i]\n        this.values[move.i] = this.values[move.j]\n        this.values[move.j] = temp\n        break\n      default:\n    }\n    return true\n  }\n\n  /**\n   * Moves the internal state back by one move. This involves undoing the\n   * previous move executed by next.\n   *\n   * Returns true after sucessfully reversing.\n   */\n  prev () {\n    if (this.moveIdx < 0) return false\n    if (this.moveIdx >= this.state.moves.length) {\n      // there is no move here, just decrement and continue\n      this.moveIdx--\n      return true\n    }\n    const move = this.state.moves[this.moveIdx--]\n\n    switch (move.type) {\n      case 'swap':\n        const temp = this.values[move.i]\n        this.values[move.i] = this.values[move.j]\n        this.values[move.j] = temp\n        break\n      default:\n    }\n    return true\n  }\n\n  animate () {\n    if (!this.props.animate) window.cancelAnimationFrame(this.animationFrame)\n\n    const step = this.props.reverse ? this.prev : this.next\n\n    for (var i = 0; i < this.props.speed; i++) {\n      step()\n    }\n    // if the last step is valid request another frame\n    if (step()) {\n      this.animationFrame = window.requestAnimationFrame(() => this.animate())\n    }\n\n    this.redraw()\n  }\n\n  /**\n   * Resets the values array to its original state.\n   */\n  reset () {\n    for (var i = 0; i < this.values.length; i++) {\n      this.values[i] = this.orig[i]\n    }\n    this.moveIdx = -1\n  }\n\n  render () {\n    return (\n      <canvas ref={this.canvas} className='Visualiser'>\n        Your browser does not support canvases\n      </canvas>\n    )\n  }\n}\n\nVisualiser.defaultProps = {\n  size: 100,\n  speed: 1,\n  move: -1\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.ready.then(registration => {\n    registration.unregister()\n  })\n}\n","import React, { useState } from 'react'\nimport './App.scss'\nimport Visualiser from './components/algorithm-visualiser'\n\nexport default function App () {\n  const [animate, setAnimate] = useState(false)\n\n  return (\n    <div className='App' onClick={() => setAnimate(!animate)}>\n      <Visualiser\n        animate={animate}\n        speed={200}\n      />\n    </div>\n  )\n}\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"6cf7e4a231f815cc49d3.worker.js\");\n};"],"sourceRoot":""}